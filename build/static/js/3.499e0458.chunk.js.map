{"version":3,"sources":["me/about.tsx","me/changePassword.tsx","me/tab.tsx"],"names":["About","showLogs","nav","push","header","process","logs","map","v","i","className","right","onClick","this","React","schema","name","type","required","uiSchema","items","orgPassword","widget","label","maxLength","placeholder","newPassword","newPassword1","submit","ChangePasswordPage","onSubmit","context","a","values","form","data","setValue","replace","back","requiredFlag","onButtonClick","Me","about","changePassword","window","confirm","logout","rows","user","aboutRows","component","iconClass","icon","text","logOutRows","bk","exit","size","undefined","showLogin","consts","appIcon","main","discription","String","id"],"mappings":"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","file":"static/js/3.499e0458.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport { Page, nav } from 'tonva';\r\n\r\nexport class About extends React.Component {\r\n    private showLogs = () => {\r\n        nav.push(<Page header=\"Logs\">\r\n            <div>NODE_ENV: {process.env.NODE_ENV}</div>\r\n            {nav.logs.map((v,i) => {\r\n                return <div key={i} className=\"px-3 py-1\">{v}</div>;\r\n            })}\r\n        </Page>);\r\n    }\r\n\r\n    render() {\r\n        let right = <button className='btn btn-success btn-sm' onClick={this.showLogs}>log</button>;\r\n        return <Page header=\"关于MI投资\" right={right}>\r\n            <div className='m-3'>\r\n            MI投资\r\n            </div>\r\n        </Page>;\r\n    }\r\n}","/*eslint @typescript-eslint/no-unused-vars: [\"off\", { \"vars\": \"all\" }]*/\r\nimport * as React from 'react';\r\nimport {Page, nav, Form, Context, Schema, UiSchema, UiPasswordItem} from 'tonva';\r\n//import center from './center';\r\n\r\nconst schema: Schema = [\r\n    {name:'orgPassword', type: 'string', required: true},\r\n    {name:'newPassword', type: 'string', required: true},\r\n    {name:'newPassword1', type: 'string', required: true},\r\n    {name: 'submit', type: 'submit'},\r\n];\r\n\r\nconst uiSchema: UiSchema = {\r\n    items: {\r\n        orgPassword: {\r\n            widget: 'password',\r\n            label: '原密码',\r\n            maxLength: 60,\r\n            placeholder: '输入原来的密码'\r\n        } as UiPasswordItem,\r\n        newPassword: {\r\n            widget: 'password',\r\n            label: '新密码',\r\n            maxLength: 60,\r\n            placeholder: '输入新设的密码'\r\n        } as UiPasswordItem,\r\n        newPassword1: {\r\n            widget: 'password',\r\n            label: '确认密码',\r\n            maxLength: 60,\r\n            placeholder: '再次输入新设密码'\r\n        } as UiPasswordItem,\r\n        submit: {\r\n            widget: 'button',\r\n            className: 'btn btn-primary',\r\n            label: '提交'\r\n        }\r\n    }\r\n}\r\n\r\nexport default class ChangePasswordPage extends React.Component {\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let values:any = context.form.data;\r\n        let {orgPassword, newPassword, newPassword1} = values;\r\n        if (newPassword !== newPassword1) {\r\n            context.setValue('newPassword', '');\r\n            context.setValue('newPassword1', '');\r\n            return '新密码错误，请重新输入';\r\n        }\r\n        let ret = false; //await center.changePassword({orgPassword: orgPassword, newPassword:newPassword});\r\n        if (ret === false) {\r\n            context.setValue('orgPassword', '');\r\n            return '原密码错误';\r\n        }\r\n        nav.replace(<Page header=\"修改密码\" back=\"close\">\r\n            <div className=\"m-3  text-success\">\r\n                密码修改成功！\r\n            </div>\r\n        </Page>);\r\n        return;\r\n    }\r\n    render() {\r\n        return <Page header=\"修改密码\">\r\n            <Form className=\"m-3\"\r\n                schema={schema} uiSchema={uiSchema}\r\n                requiredFlag={false}\r\n                onButtonClick={this.onSubmit} />\r\n        </Page>;\r\n    }\r\n}\r\n","/*eslint @typescript-eslint/no-unused-vars: [\"off\", { \"vars\": \"all\" }]*/\r\nimport * as React from 'react';\r\nimport {nav, User, Page} from 'tonva';\r\nimport {Prop, Media, IconText, FA, PropGrid} from 'tonva';\r\nimport { consts } from '../UqApp';\r\nimport {About} from './about';\r\nimport ChangePasswordPage from './changePassword';\r\n\r\nclass Me extends React.Component {\r\n    private exit() {\r\n        if (window.confirm('退出当前账号不会删除任何历史数据，下次登录依然可以使用本账号')) {\r\n            nav.logout();\r\n        }\r\n    }\r\n\r\n    private about = () => nav.push(<About />);\r\n\r\n    private changePassword = () => {\r\n        nav.push(<ChangePasswordPage />);\r\n    }\r\n    render() {\r\n        const {user} = nav;\r\n        let aboutRows:Prop[] = [\r\n            '',\r\n            {\r\n                type: 'component',\r\n                component: <IconText iconClass=\"text-info\" icon=\"envelope\" text=\"关于MI投资\" />,\r\n                onClick: this.about\r\n            },\r\n            '',\r\n        ];\r\n\r\n        let logOutRows:Prop[] = [\r\n            '',\r\n            {\r\n                type: 'component',\r\n                bk: '',\r\n                component: <button className=\"btn btn-danger w-100\" onClick={this.exit}>\r\n                    <FA name=\"sign-out\" size=\"lg\" /> 退出登录\r\n                </button>\r\n            },\r\n        ];\r\n        let rows:Prop[];\r\n        if (user === undefined) {\r\n            rows = aboutRows;\r\n            rows.push('');\r\n            rows.push(\r\n                {\r\n                    type: 'component',\r\n                    component: <button className=\"btn btn-success w-100\" onClick={() => nav.showLogin()}>\r\n                        <FA name=\"sign-out\" size=\"lg\" /> 请登录\r\n                    </button>\r\n                },\r\n            );\r\n        }\r\n        else {\r\n            rows = [\r\n                '',\r\n                {\r\n                    type: 'component',\r\n                    component: <Media icon={consts.appIcon} main={user.name} discription={String(user.id)} />\r\n                },\r\n                '',\r\n                {\r\n                    type: 'component',\r\n                    component: <IconText iconClass=\"text-info\" icon=\"envelope\" text=\"修改密码\" />,\r\n                    onClick: this.changePassword\r\n                },\r\n            ]\r\n            rows.push(...aboutRows, ...logOutRows);\r\n        }\r\n        return <PropGrid rows={rows} values={{}} />;\r\n    }\r\n}\r\n\r\nexport default Me;"],"sourceRoot":""}