{"version":3,"sources":["tonva/entry/res/login.ts","tonva/entry/res/register.ts","tonva/entry/tools.tsx","tonva/entry/register.tsx","tonva/entry/login.tsx","tonva/img/logo.svg"],"names":["loginRes","_","a","registerRes","logo","require","tonvaTop","nav","loginTop","className","src","alt","senders","type","caption","regex","mobileRegex","emailRegex","getSender","un","find","v","test","RegisterController","account","password","verify","accountPageCaption","accountLabel","accountSubmitCaption","passwordPageCaption","passwordSubmitCaption","successText","login","userApi","user","pwd","guest","undefined","retUser","alert","logined","this","openVPage","AccountPage","VerifyPage","PasswordPage","RegSuccess","registerReturn","msg","isExists","ret","error","accountError","setVerify","oem","toVerify","params","nick","country","mobile","mobileCountry","email","Number","register","clear","toSuccess","regReturn","Controller","ForgetController","resetPassword","schema","name","required","maxLength","uiSchema","res","resLang","page","header","controller","style","marginLeft","marginRight","onButtonClick","onSubmit","onEnter","requiredFlag","context","clearContextErrors","value","getValue","sender","setError","length","checkAccount","items","widget","label","placeholder","openPage","VPage","onVerifyChanged","prev","setDisabled","onChanged","submit","disabled","checkVerify","toPassword","typeText","extra","values","form","data","rePwd","setValue","execute","push","onClick","Login","username","console","log","token","props","callback","clickReg","start","clickForget","footer","color","margin","withBack","React","module","exports"],"mappings":"+LAMaA,G,OAA0B,CACnCC,EAAG,CACCC,EAAG,OCFEC,EAAgC,CACzCF,EAAG,CACCC,EAAG,MCLLE,EAAOC,EAAQ,KAEd,SAASC,IACZ,OAAOC,MAAIC,SAAS,uBAAKC,UAAU,6BAC/B,uBAAKA,UAAU,kCAAkCC,IAAKN,EAAMO,IAAI,QAChE,uBAAKF,UAAU,4BAA2B,wBAAMA,UAAU,qBAAhB,UACtC,wBAAMA,UAAU,eAAhB,aAWZ,IAAMG,EAAmB,CACrB,CAACC,KAAK,SAAUC,QAAQ,qBAAOC,MAAOC,eACtC,CAACH,KAAK,QAASC,QAAQ,eAAMC,MAAOE,eAGjC,SAASC,EAAUC,GAEtB,OADaP,EAAQQ,MAAK,SAAAC,GAAC,OAAyB,IAArBA,EAAEN,MAAMO,KAAKH,MC6BzC,IAAMI,EAAb,2MACIC,aADJ,IAEIX,UAFJ,IAGIY,cAHJ,IAIIC,YAJJ,IAMIC,mBAAqB,2BANzB,EAOIC,aAAe,2BAPnB,EAQIC,qBAAuB,iCAR3B,EASIC,oBAAsB,2BAT1B,EAUIC,sBAAwB,iCAV5B,EAWIC,YAAc,2BAXlB,EA8BIC,MA9BJ,sBA8BY,4BAAA/B,EAAA,sEACgBgC,IAAQD,MAAM,CAACE,KAAM,EAAKX,QAASY,IAAK,EAAKX,SAAUY,MAAO9B,MAAI8B,QADlF,eAEYC,KADZC,EADA,+BAGAC,MAAM,oBAHN,0CAMEjC,MAAIkC,QAAQF,GANd,2CA9BZ,yLAcQG,KAAKC,UAAUC,GAdvB,qIAiBapB,GACLkB,KAAKlB,QAAUA,EACfkB,KAAKC,UAAUE,KAnBvB,mCAuBQH,KAAKC,UAAUG,KAvBvB,kCA2BQJ,KAAKC,UAAUI,KA3BvB,gCAuCsBC,GACd,IAAIC,EACJ,OAAQD,GACJ,QACI,MAAO,6CACX,KAAK,EACD,MAAO,iCACX,KAAK,EACD,OACJ,KAAK,EACDC,EAAM,sBAASP,KAAKlB,QACpB,MACJ,KAAK,EACDyB,EAAM,uBAAUP,KAAKlB,QACrB,MACJ,KAAK,EACDyB,EAAM,gBAAQP,KAAKlB,QAG3B,OAAOyB,EAAM,gDA1DrB,uKA8DwBf,IAAQgB,SAASR,KAAKlB,SA9D9C,UA8DY2B,EA9DZ,YAgEsBb,KADVc,EAAQV,KAAKW,aAAaF,IA/DtC,yCAgEwCC,GAhExC,uBAiEoBlB,IAAQoB,UAAUZ,KAAKlB,QAASkB,KAAK7B,KAAMN,MAAIgD,KAjEnE,cAiEQJ,EAjER,OAkEQT,KAAKc,SAASd,KAAKlB,SAlE3B,6JAsE2B0B,GACnB,GAAIA,EAAW,EAAG,MAAO,qDAvEjC,oJA2EYO,EAA4B,CAC5BC,UAAMpB,EACNH,KAAMO,KAAKlB,QACXY,IAAKM,KAAKjB,SACVkC,aAASrB,EACTsB,YAAQtB,EACRuB,mBAAevB,EACfwB,WAAOxB,EACPZ,OAAQgB,KAAKhB,QAnFzB,KAqFgBgB,KAAK7B,KArFrB,OAsFiB,WAtFjB,OA0FiB,UA1FjB,6BAuFgB4C,EAAOG,OAASG,OAAOrB,KAAKlB,SAC5BiC,EAAOI,cAAc,GAxFrC,kCA2FgBJ,EAAOK,MAAQpB,KAAKlB,QA3FpC,4CA8FwBU,IAAQ8B,SAASP,GA9FzC,WA+FoB,KADRN,EA9FZ,gCAgGY5C,MAAI0D,QACJvB,KAAKwB,YAjGjB,kCAoGYd,EAAQV,KAAKyB,UAAUhB,GApGnC,kBAqGeC,GArGf,4GAAwCgB,cAyG3BC,EAAb,2MACI1C,mBAAqB,2BADzB,EAEIC,aAAe,eAFnB,EAGIC,qBAAuB,iCAH3B,EAIIC,oBAAsB,2BAJ1B,EAKIC,sBAAwB,eAL5B,EAMIC,YAAc,uCANlB,mMAScE,IAAQoC,cAAc5B,KAAKlB,QAASkB,KAAKjB,SAAUiB,KAAKhB,OAAQgB,KAAK7B,MATnF,cAUQN,MAAI0D,QACJvB,KAAKwB,YAXb,uBAYe5B,GAZf,yIAe2BY,GACnB,GAAiB,IAAbA,EAAgB,MAAO,uDAhBnC,GAAsC3B,GAoBhCqB,E,2MACM2B,OAAiB,CACrB,CAACC,KAAM,OAAQ3D,KAAM,SAAU4D,UAAU,EAAMC,UAAW,KAC1D,CAACF,KAAM,SAAU3D,KAAM,W,EAEnB8D,c,IAEEC,IAAmBC,kBAAQ1E,G,EAgB7B2E,KAAO,WACX,OAAO,gBAAC,OAAD,CAAMC,OAAQ,EAAKC,WAAWrD,oBACjC,uBAAKlB,UAAU,sBACXwE,MAAO,CAACC,WAAW,OAAQC,YAAY,SACtC7E,IACD,uBAAKG,UAAU,SACf,gBAAC,OAAD,CAAM8D,OAAQ,EAAKA,OAAQI,SAAU,EAAKA,SACtCS,cAAe,EAAKC,SACpBC,QAAS,EAAKA,QACdC,cAAc,O,EAKtBF,S,uCAAW,WAAOb,EAAagB,GAApB,uBAAAtF,EAAA,yDACfsF,EAAQC,qBACJtD,EAAO,OACPuD,EAAQF,EAAQG,SAASxD,QAEdG,KADXsD,EAAS1E,EAAUwE,IAJR,uBAMXF,EAAQK,SAAS1D,EAAM,0DANZ,6BAUF,YADTtB,EAAwB+E,EAAO/E,MATpB,oBAWU,KAAjB6E,EAAMI,QAA8B,MAAbJ,EAAM,GAXtB,wBAYPF,EAAQK,SAAS1D,EAAM,0DAZhB,kCAgBf,EAAK6C,WAAWxD,QAAUkE,EAC1B,EAAKV,WAAWnE,KAAOA,EAjBR,UAkBC,EAAKmE,WAAWe,eAlBjB,aAmBHzD,KADRa,EAlBW,SAmBQqC,EAAQK,SAAS1D,EAAMgB,GAnB/B,4C,0DAsBXmC,Q,uCAAU,WAAOd,EAAagB,GAApB,SAAAtF,EAAA,yDACD,SAATsE,EADU,gCAEG,EAAKa,SAAS,SAAUG,GAF3B,mF,wOAlDd9C,KAAKiC,SAAW,CACZqB,MAAO,CACH7D,KAAM,CACF8D,OAAQ,OACRC,MAAOxD,KAAKsC,WAAWpD,aACvBuE,YAAa,wCAEjBzE,OAAQ,CAACuE,OAAQ,SAAUxF,UAAW,iCAAkCyF,MAAO,oCAInFxD,KAAK0D,SAAS1D,KAAKoC,M,2GApBLuB,SAkEpBxD,E,2MACM0B,OAAiB,CACrB,CAACC,KAAM,SAAU3D,KAAM,SAAU4D,UAAU,EAAMC,UAAW,GAC5D,CAACF,KAAM,SAAU3D,KAAM,W,EAGnByF,gBAAkB,SAACd,EAAiBE,EAAWa,GACnDf,EAAQgB,YAAY,UAAWd,GAA2B,IAAjBA,EAAMI,S,EAE3CnB,SAAqB,CACzBqB,MAAO,CACHtE,OAAQ,CACJuE,OAAQ,OACRC,MAAO,qBACPC,YAAa,uCACbM,UAAW,EAAKH,iBAEpBI,OAAQ,CACJT,OAAQ,SACRxF,UAAW,iCACXyF,MAAO,uBACPS,UAAU,K,EAOdtB,S,uCAAW,WAAOb,EAAagB,GAApB,eAAAtF,EAAA,6DACXwB,EAAS,EAAKsD,WAAWtD,OAAS8D,EAAQG,SAAS,UADxC,SAECzD,IAAQ0E,YAAY,EAAK5B,WAAWxD,QAASE,GAF9C,UAGH,IAHG,8BAIX8D,EAAQK,SAAS,SAAU,kCAJhB,0BAOf,EAAKb,WAAW6B,aAPD,2C,0DAUXvB,Q,uCAAU,WAAOd,EAAagB,GAApB,SAAAtF,EAAA,yDACD,WAATsE,EADU,gCAEG,EAAKa,SAAS,SAAUG,GAF3B,mF,0DAKVV,KAAO,WACX,IAAIgC,EAAiBC,EACrB,OAAQ,EAAK/B,WAAWnE,MACpB,IAAK,SAAUiG,EAAW,qBAAO,MACjC,IAAK,QACDA,EAAW,eACXC,EAAQ,gCAAE,wBAAMtG,UAAU,eAAhB,gBAAF,mFAAwD,4BAGxE,OAAO,gBAAC,OAAD,CAAMsE,OAAO,sBAChB,uBAAKtE,UAAU,sBACXwE,MAAO,CAACC,WAAW,OAAQC,YAAY,SAD3C,mDAEa2B,EAAS,2BAClB,uBAAKrG,UAAU,wCAAuC,yBAAI,EAAKuE,WAAWxD,UACzEuF,EACD,uBAAKtG,UAAU,SACf,gBAAC,OAAD,CAAM8D,OAAQ,EAAKA,OAAQI,SAAU,EAAKA,SACtCS,cAAe,EAAKC,SACpBC,QAAS,EAAKA,QACdC,cAAc,O,gLApC1B7C,KAAK0D,SAAS1D,KAAKoC,M,2GA1BFuB,SAoEnBvD,E,2MACMyB,OAAiB,CACrB,CAACC,KAAM,MAAO3D,KAAM,SAAU4D,UAAU,EAAMC,UAAW,KACzD,CAACF,KAAM,QAAS3D,KAAM,SAAU4D,UAAU,EAAMC,UAAW,KAC3D,CAACF,KAAM,SAAU3D,KAAM,W,EAEnB8D,c,IAWAU,S,uCAAW,WAAOb,EAAagB,GAApB,qBAAAtF,EAAA,yDACX8G,EAASxB,EAAQyB,KAAKC,KACrB9E,EAAc4E,EAAd5E,IAAK+E,EAASH,EAATG,MAEL/E,GAAOA,IAAQ+E,EAJL,gBAKX3B,EAAQ4B,SAAS,MAAO,IACxB5B,EAAQ4B,SAAS,QAAS,IAC1BhE,EAAQ,iFACRoC,EAAQK,SAAS,MAAOzC,GARb,8BAWX,EAAK4B,WAAWvD,SAAWW,EAXhB,UAYG,EAAK4C,WAAWqC,UAZnB,aAaG/E,KADdc,EAZW,SAcP7C,MAAI+G,KAAK,gBAAC,OAAD,CAAMvC,OAAO,kCAAQ,uBAAKtE,UAAU,mBAAmB2C,KAdzD,iCAiBRA,GAjBQ,4C,0DAmBXkC,Q,uCAAU,WAAOd,EAAagB,GAApB,SAAAtF,EAAA,yDACD,UAATsE,EADU,gCAEG,EAAKa,SAAS,SAAUG,GAF3B,mF,0DAKVV,KAAO,WACX,OAAO,gBAAC,OAAD,CAAMC,OAAQ,EAAKC,WAAWlD,qBACjC,uBAAKrB,UAAU,sBACXwE,MAAO,CAACC,WAAW,OAAQC,YAAY,SAD3C,2BAEQ,2BACJ,uBAAK1E,UAAU,wCAAuC,yBAAI,EAAKuE,WAAWxD,UAC1E,uBAAKf,UAAU,SACf,gBAAC,OAAD,CAAM8D,OAAQ,EAAKA,OAAQI,SAAU,EAAKA,SACtCS,cAAe,EAAKC,SACpBC,QAAS,EAAKA,QACdC,cAAc,O,gLA3C1B7C,KAAKiC,SAAW,CACZqB,MAAO,CACH5D,IAAK,CAAC6D,OAAQ,WAAYE,YAAa,eAAMD,MAAO,gBACpDiB,MAAO,CAAClB,OAAQ,WAAYE,YAAa,2BAAQD,MAAO,4BACxDQ,OAAQ,CAACT,OAAQ,SAAUxF,UAAW,iCAAkCyF,MAAOxD,KAAKsC,WAAWjD,yBAGvGW,KAAK0D,SAAS1D,KAAKoC,M,2GAfAuB,SAyDrBtD,E,2MAKM+B,KAAO,WAAO,IAAD,EACqB,EAAKE,WAApCxD,EADU,EACVA,QAASQ,EADC,EACDA,YAAaC,EADZ,EACYA,MAC7B,OACA,gBAAC,OAAD,CAAM8C,QAAQ,GACV,uBAAKtE,UAAU,uBACX,wBAAMA,UAAU,QACZ,uBAAKA,UAAU,QAAf,gBACO,0BAAQA,UAAU,gBAAgBe,EAAlC,KADP,IAC6DQ,EAD7D,UAGA,0BAAQvB,UAAU,4BAA4BI,KAAK,SAAS0G,QAAStF,GAArE,gC,gLAZZS,KAAK0D,SAAS1D,KAAKoC,M,2GAFFuB,S,wCC3WzB,IAAM9B,EAAiB,CACnB,CAACC,KAAM,WAAY3D,KAAM,SAAU4D,UAAU,EAAMC,UAAW,KAC9D,CAACF,KAAM,WAAY3D,KAAM,SAAU4D,UAAU,EAAMC,UAAW,KAC9D,CAACF,KAAM,QAAS3D,KAAM,WASL2G,E,2MACT5C,IAAgBC,kBAAQ7E,G,EACxB2E,SAAqB,CACzBqB,MAAO,CACHyB,SAAU,CAACtB,YAAa,+CAAaD,MAAO,4BAC5CzE,SAAU,CAACwE,OAAQ,WAAYE,YAAa,eAAMD,MAAO,gBACzDjE,MAAO,CAACgE,OAAQ,SAAUxF,UAAW,iCAAkCyF,MAAO,kB,EAI9Eb,S,uCAAW,WAAOb,EAAagB,GAApB,yBAAAtF,EAAA,yDACX8G,EAASxB,EAAQyB,KAAKC,KACtB/F,EAAK6F,EAAM,cAEH1E,KADRF,EAAM4E,EAAM,UAHD,yCAKJ,qCALI,uBAOE9E,IAAQD,MAAM,CAC3BE,KAAMhB,EACNiB,IAAKA,EACLC,MAAO9B,MAAI8B,QAVA,eAaFC,KANTH,EAPW,gCAcPyD,EAAS1E,EAAUC,GACnBN,OAAyByB,IAAXsD,EAAsBA,EAAO9E,QAAU,qBAf9C,kBAgBJD,EAAO,kCAhBH,eAkBf6G,QAAQC,IAAI,gCAAiCxF,EAAKqC,KAAMrC,EAAKyF,OAlB9C,UAmBTrH,MAAIkC,QAAQN,EAAM,EAAK0F,MAAMC,UAnBpB,4C,0DAqBXxC,Q,uCAAU,WAAOd,EAAagB,GAApB,SAAAtF,EAAA,yDACD,aAATsE,EADU,gCAEG,EAAKa,SAAS,QAASG,GAF1B,mF,0DAKVuC,SAAW,WAEA,IAAIxG,OAAmBe,GAC7B0F,S,EAELC,YAAc,WACL,IAAI5D,OAAiB/B,GAC3B0F,S,wEAED,IAAD,OACDE,EAAS,uBAAKzH,UAAU,eACxB,0BAAQA,UAAU,eAAe0H,MAAM,OAAOlD,MAAO,CAACmD,OAAO,YACzDb,QAAS7E,KAAKqF,UADlB,6BAKAhD,GAAoC,EAIxC,OAH4B,IAAxBrC,KAAKmF,MAAMQ,WACXtD,EAAS,gBAEN,gBAAC,OAAD,CAAMA,OAAQA,EAAQmD,OAAQA,GACjC,uBAAKzH,UAAU,sEACX,uBAAKA,UAAU,cACf,uBAAKA,UAAU,SACVH,IACD,uBAAKG,UAAU,SACf,gBAAC,OAAD,CAAM8D,OAAQA,EAAQI,SAAUjC,KAAKiC,SACjCS,cAAe1C,KAAK2C,SACpBC,QAAS5C,KAAK4C,QACdC,cAAc,IAClB,0BAAQ9E,UAAU,yBACd8G,QAAS,kBAAM,EAAKU,gBADxB,6BAKJ,uBAAKxH,UAAU,cACf,uBAAKA,UAAU,oB,GAxEI6H,c,oBCpBnCC,EAAOC,QAAU,IAA0B","file":"static/js/3.bbdc40c3.chunk.js","sourcesContent":["import { Res } from '../../components';\n\nexport interface LoginRes {\n    a: string;\n}\n\nexport const loginRes: Res<LoginRes> = {\n    _: {\n        a: 'd',\n    }\n}\n","import { Res } from '../../components';\n\nexport interface RegisterRes {\n    a: string;\n}\n\nexport const registerRes: Res<RegisterRes> = {\n    _: {\n        a: 'd',\n    }\n}\n","import * as React from 'react';\nimport { nav, mobileRegex, emailRegex } from '../components';\n\nconst logo = require('../img/logo.svg');\n\nexport function tonvaTop() {\n    return nav.loginTop(<div className=\"d-flex align-items-center\">\n        <img className=\"App-logo h-3c position-absolute\" src={logo} alt=\"img\" />\n        <div className=\"h3 flex-fill text-center\"><span className=\"text-primary mr-3\">同</span>\n            <span className=\"text-danger\">花</span>\n        </div>\n    </div>);\n}\n\ninterface Sender {\n    type: string;\n    caption: string;\n    regex: RegExp;\n}\n\nconst senders:Sender[] = [\n    {type:'mobile', caption:'手机号', regex: mobileRegex},\n    {type:'email', caption:'邮箱', regex: emailRegex}\n];\n\nexport function getSender(un: string):Sender {\n    let sender = senders.find(v => v.regex.test(un) === true);\n    return sender;\n}","import * as React from 'react';\r\nimport {nav, Page, Schema, UiSchema, UiTextItem, UiPasswordItem, UiButton, Form, Context, resLang, StringSchema, Controller, \r\n    VPage, NumSchema} from '../components';\r\nimport { userApi, RegisterParameter } from '../net';\r\nimport '../css/va-form.css';\r\nimport { RegisterRes, registerRes } from './res';\r\nimport { tonvaTop, getSender } from './tools';\r\n\r\nexport interface Values {\r\n    user: string;\r\n    pwd: string;\r\n    rePwd: string;\r\n    country?: string;\r\n    mobile?: string;\r\n    email?: string;\r\n}\r\n/*\r\nclass AccountInput extends TextWidget {\r\n    @observable private buttonDisabled: boolean = true;\r\n    private onClick = () => {\r\n        let {onButtonClick} = this.context.form.props;\r\n        if (onButtonClick === undefined) return;\r\n        onButtonClick(this.name, this.context);\r\n    }\r\n    protected onChange(evt: React.ChangeEvent<any>) {\r\n        this.buttonDisabled = (evt.target.value.trim().length === 0);\r\n    }\r\n    render() {\r\n        return <>\r\n            <div className=\"input-group\">\r\n                <input ref={input=>this.input = input}\r\n                            className=\"form-control\"\r\n                            type={this.inputType}\r\n                            defaultValue={this.value}\r\n                            onChange={(evt: React.ChangeEvent<any>) => this.onChange(evt)}\r\n                            placeholder='手机号/邮箱'\r\n                            readOnly={this.readOnly}\r\n                            disabled={this.disabled}\r\n                            onKeyDown = {this.onKeyDown}\r\n                            onFocus = {(evt: React.FocusEvent<any>) => this.onFocus(evt)}\r\n                            onBlur={(evt: React.FocusEvent<any>) => this.onBlur(evt)}\r\n                            maxLength={(this.itemSchema as StringSchema).maxLength} />\r\n                <div className=\"input-group-append\">\r\n                    <button className=\"btn btn-sm btn-outline-primary\"\r\n                        type=\"button\" disabled={this.buttonDisabled}\r\n                        onClick={this.onClick}>\r\n                        <small>发送验证码</small>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            {this.renderErrors()}\r\n        </>;\r\n    }\r\n}\r\n*/\r\nexport class RegisterController extends Controller {\r\n    account: string;\r\n    type:'mobile'|'email';\r\n    password: string;\r\n    verify: string;\r\n\r\n    accountPageCaption = '注册账号';\r\n    accountLabel = '注册账号';\r\n    accountSubmitCaption = '注册新账号'; \r\n    passwordPageCaption = '账号密码';\r\n    passwordSubmitCaption = '注册新账号'; \r\n    successText = '注册成功';\r\n\r\n    protected async internalStart() {\r\n        this.openVPage(AccountPage);\r\n    }\r\n\r\n    toVerify(account:string) {\r\n        this.account = account;\r\n        this.openVPage(VerifyPage);\r\n    }\r\n\r\n    toPassword() {\r\n        this.openVPage(PasswordPage);\r\n    }\r\n\r\n    toSuccess() {\r\n        this.openVPage(RegSuccess);\r\n    }\r\n\r\n    login = async () => {\r\n        let retUser = await userApi.login({user: this.account, pwd: this.password, guest: nav.guest});\r\n        if (retUser === undefined) {\r\n            alert('something wrong!');\r\n            return;\r\n        }\r\n        await nav.logined(retUser);\r\n    }\r\n\r\n    private regReturn(registerReturn:number):string {\r\n        let msg:any;\r\n        switch (registerReturn) {\r\n            default: \r\n                return '服务器发生错误';\r\n            case 4:\r\n                return '验证码错误';\r\n            case 0:\r\n                return;\r\n            case 1:\r\n                msg = '用户名 ' + this.account;\r\n                break;\r\n            case 2:\r\n                msg = '手机号 +' + this.account;\r\n                break;\r\n            case 3:\r\n                msg = '邮箱 ' + this.account;\r\n                break;\r\n        }\r\n        return msg + ' 已经被注册过了';\r\n    }\r\n\r\n    async checkAccount():Promise<string> {\r\n        let ret = await userApi.isExists(this.account);\r\n        let error = this.accountError(ret);\r\n        if (error !== undefined) return error;\r\n        ret = await userApi.setVerify(this.account, this.type, nav.oem);\r\n        this.toVerify(this.account);\r\n        return;\r\n    }\r\n\r\n    protected accountError(isExists: number) {\r\n        if (isExists > 0) return '已经被注册使用了';\r\n    }\r\n\r\n    async execute() {\r\n        let params: RegisterParameter = {\r\n            nick: undefined,\r\n            user: this.account, \r\n            pwd: this.password,\r\n            country: undefined,\r\n            mobile: undefined,\r\n            mobileCountry: undefined,\r\n            email: undefined,\r\n            verify: this.verify\r\n        }\r\n        switch (this.type) {\r\n            case 'mobile':\r\n                params.mobile = Number(this.account);\r\n                params.mobileCountry=86;\r\n                break;\r\n            case 'email':\r\n                params.email = this.account;\r\n                break;\r\n        }\r\n        let ret = await userApi.register(params);\r\n        if (ret === 0) {\r\n            nav.clear();\r\n            this.toSuccess();\r\n            return;\r\n        }\r\n        let error = this.regReturn(ret)\r\n        return error;\r\n    }\r\n}\r\n\r\nexport class ForgetController extends RegisterController {\r\n    accountPageCaption = '密码找回';\r\n    accountLabel = '账号';\r\n    accountSubmitCaption = '注册新账号'; \r\n    passwordPageCaption = '重置密码';\r\n    passwordSubmitCaption = '提交'; \r\n    successText = '成功修改密码';\r\n\r\n    async execute():Promise<any> {\r\n        await userApi.resetPassword(this.account, this.password, this.verify, this.type);\r\n        nav.clear();\r\n        this.toSuccess();\r\n        return undefined;\r\n    }\r\n\r\n    protected accountError(isExists: number) {\r\n        if (isExists === 0) return '请输入正确的账号';\r\n    }\r\n}\r\n\r\nclass AccountPage extends VPage<RegisterController> {\r\n    private schema: Schema = [\r\n        {name: 'user', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'verify', type: 'submit'},\r\n    ]\r\n    private uiSchema: UiSchema;\r\n\r\n    protected res: RegisterRes = resLang(registerRes);\r\n    async open() {\r\n        this.uiSchema = {\r\n            items: {\r\n                user: {\r\n                    widget: 'text',\r\n                    label: this.controller.accountLabel,\r\n                    placeholder: '手机号或邮箱',\r\n                } as UiTextItem, \r\n                verify: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: '发送验证码'} as UiButton,\r\n            }\r\n        }\r\n                \r\n            this.openPage(this.page);\r\n    }\r\n\r\n    private page = ():JSX.Element => {\r\n        return <Page header={this.controller.accountPageCaption}>\r\n            <div className=\"w-max-20c my-5 py-5\"\r\n                style={{marginLeft:'auto', marginRight:'auto'}}>\r\n                {tonvaTop()}\r\n                <div className=\"h-3c\" />\r\n                <Form schema={this.schema} uiSchema={this.uiSchema} \r\n                    onButtonClick={this.onSubmit}\r\n                    onEnter={this.onEnter} \r\n                    requiredFlag={false} />\r\n            </div>\r\n        </Page>;\r\n    }\r\n\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        context.clearContextErrors();\r\n        let user = 'user';\r\n        let value = context.getValue(user);\r\n        let sender = getSender(value);\r\n        if (sender === undefined) {\r\n            context.setError(user, '必须是手机号或邮箱');\r\n            return;\r\n        }\r\n        let type:'mobile'|'email' = sender.type as 'mobile'|'email';\r\n        if (type === 'mobile') {\r\n            if (value.length !== 11 || value[0] !== '1') {\r\n                context.setError(user, '请输入正确的手机号');\r\n                return;\r\n            }\r\n        }\r\n        this.controller.account = value;\r\n        this.controller.type = type;\r\n        let ret = await this.controller.checkAccount();\r\n        if (ret !== undefined) context.setError(user, ret);\r\n    }\r\n\r\n    private onEnter = async (name:string, context:Context):Promise<string> => {\r\n        if (name === 'user') {\r\n            return await this.onSubmit('verify', context);\r\n        }\r\n    }\r\n}\r\n\r\nclass VerifyPage extends VPage<RegisterController> {\r\n    private schema: Schema = [\r\n        {name: 'verify', type: 'number', required: true, maxLength: 6} as NumSchema,\r\n        {name: 'submit', type: 'submit'},\r\n    ]\r\n\r\n    private onVerifyChanged = (context:Context, value:any, prev:any) => {\r\n        context.setDisabled('submit', !value || (value.length !== 6));\r\n    }\r\n    private uiSchema: UiSchema = {\r\n        items: {\r\n            verify: {\r\n                widget: 'text',\r\n                label: '验证码',\r\n                placeholder: '请输入验证码',\r\n                onChanged: this.onVerifyChanged,\r\n            } as UiTextItem, \r\n            submit: {\r\n                widget: 'button', \r\n                className: 'btn btn-primary btn-block mt-3', \r\n                label: '下一步 >',\r\n                disabled: true\r\n            } as UiButton,\r\n        }\r\n    }\r\n    async open() {\r\n        this.openPage(this.page);\r\n    }\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let verify = this.controller.verify = context.getValue('verify');\r\n        let ret = await userApi.checkVerify(this.controller.account, verify);\r\n        if (ret === 0) {\r\n            context.setError('verify', '验证码错误');\r\n            return;\r\n        }\r\n        this.controller.toPassword();\r\n    }\r\n\r\n    private onEnter = async (name:string, context:Context):Promise<string> => {\r\n        if (name === 'verify') {\r\n            return await this.onSubmit('submit', context);\r\n        }\r\n    }\r\n    private page = ():JSX.Element => {\r\n        let typeText:string, extra:any;\r\n        switch (this.controller.type) {\r\n            case 'mobile': typeText = '手机号'; break;\r\n            case 'email': \r\n                typeText = '邮箱'; \r\n                extra = <><span className=\"text-danger\">注意</span>: 有可能误为垃圾邮件，请检查<br/></>;\r\n                break;\r\n        }\r\n        return <Page header=\"验证码\">\r\n            <div className=\"w-max-20c my-5 py-5\"\r\n                style={{marginLeft:'auto', marginRight:'auto'}}>\r\n                验证码已经发送到{typeText}<br/>\r\n                <div className=\"py-2 px-3 my-2 text-primary bg-light\"><b>{this.controller.account}</b></div>\r\n                {extra}\r\n                <div className=\"h-1c\" />\r\n                <Form schema={this.schema} uiSchema={this.uiSchema} \r\n                    onButtonClick={this.onSubmit} \r\n                    onEnter={this.onEnter}\r\n                    requiredFlag={false} />\r\n            </div>\r\n        </Page>\r\n    }\r\n}\r\n\r\nclass PasswordPage extends VPage<RegisterController> {\r\n    private schema: Schema = [\r\n        {name: 'pwd', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'rePwd', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'submit', type: 'submit'},\r\n    ]\r\n    private uiSchema: UiSchema;\r\n    async open() {\r\n        this.uiSchema = {\r\n            items: {\r\n                pwd: {widget: 'password', placeholder: '密码', label: '密码'} as UiPasswordItem,\r\n                rePwd: {widget: 'password', placeholder: '重复密码', label: '重复密码'} as UiPasswordItem,\r\n                submit: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: this.controller.passwordSubmitCaption} as UiButton,\r\n            }\r\n        }\r\n        this.openPage(this.page);\r\n    }\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let values = context.form.data;\r\n        let {pwd, rePwd} = values;\r\n        let error:string;\r\n        if (!pwd || pwd !== rePwd) {\r\n            context.setValue('pwd', '');\r\n            context.setValue('rePwd', '');\r\n            error = '密码错误，请重新输入密码！';\r\n            context.setError('pwd', error);\r\n        }\r\n        else {\r\n            this.controller.password = pwd;\r\n            error = await this.controller.execute();\r\n            if (error !== undefined) {\r\n                nav.push(<Page header=\"注册不成功\"><div className=\"p-5 text-danger\">{error}</div></Page>);\r\n            }\r\n        }\r\n        return error;\r\n    }\r\n    private onEnter = async (name:string, context:Context):Promise<string> => {\r\n        if (name === 'rePwd') {\r\n            return await this.onSubmit('submit', context);\r\n        }\r\n    }\r\n    private page = ():JSX.Element => {\r\n        return <Page header={this.controller.passwordPageCaption}>\r\n            <div className=\"w-max-20c my-5 py-5\"\r\n                style={{marginLeft:'auto', marginRight:'auto'}}>\r\n                注册账号<br/>\r\n                <div className=\"py-2 px-3 my-2 text-primary bg-light\"><b>{this.controller.account}</b></div>\r\n                <div className=\"h-1c\" />\r\n                <Form schema={this.schema} uiSchema={this.uiSchema}                    \r\n                    onButtonClick={this.onSubmit}\r\n                    onEnter={this.onEnter}\r\n                    requiredFlag={false} />\r\n            </div>\r\n        </Page>\r\n    }\r\n}\r\n\r\nclass RegSuccess extends VPage<RegisterController> {\r\n    async open() {\r\n        this.openPage(this.page);\r\n    }\r\n\r\n    private page = () => {\r\n        const {account, successText, login} = this.controller;\r\n        return (\r\n        <Page header={false}>\r\n            <div className=\"container w-max-30c\">\r\n                <form className=\"my-5\">\r\n                    <div className=\"py-5\">\r\n                        账号 <strong className=\"text-primary\">{account} </strong> {successText}！\r\n                    </div>\r\n                    <button className=\"btn btn-success btn-block\" type=\"button\" onClick={login}>\r\n                        直接登录\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        </Page>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {nav, Page, Form, Schema, UiSchema, UiTextItem, UiPasswordItem, Context, UiButton, resLang, StringSchema} from '../components';\r\nimport { RegisterController, ForgetController } from './register';\r\nimport { userApi } from '../net';\r\nimport { LoginRes, loginRes } from './res';\r\nimport { tonvaTop, getSender } from './tools';\r\nimport { User } from '../tool/user';\r\n\r\nconst schema: Schema = [\r\n    {name: 'username', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n    {name: 'password', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n    {name: 'login', type: 'submit'},\r\n];\r\n\r\nexport interface LoginProps {\r\n    withBack?: boolean;\r\n    callback?: (user:User) => Promise<void>;\r\n    //top?: any;\r\n}\r\n\r\nexport default class Login extends React.Component<LoginProps> {\r\n    private res: LoginRes = resLang(loginRes);\r\n    private uiSchema: UiSchema = {\r\n        items: {\r\n            username: {placeholder: '手机/邮箱/用户名', label: '登录账号'} as UiTextItem,\r\n            password: {widget: 'password', placeholder: '密码', label: '密码'} as UiPasswordItem,\r\n            login: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: '登录'} as UiButton,\r\n        }\r\n    }\r\n\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let values = context.form.data;\r\n        let un = values['username'];\r\n        let pwd = values['password'];\r\n        if (pwd === undefined) {\r\n            return 'something wrong, pwd is undefined';\r\n        }\r\n        let user = await userApi.login({\r\n            user: un,\r\n            pwd: pwd,\r\n            guest: nav.guest,\r\n        });\r\n\r\n        if (user === undefined) {\r\n            let sender = getSender(un);\r\n            let type:string = sender !== undefined? sender.caption : '用户名';\r\n            return type + '或密码错！';\r\n        }\r\n        console.log(\"onLoginSubmit: user=%s pwd:%s\", user.name, user.token);\r\n        await nav.logined(user, this.props.callback);\r\n    }\r\n    private onEnter = async (name:string, context:Context):Promise<string> => {\r\n        if (name === 'password') {\r\n            return await this.onSubmit('login', context);\r\n        }\r\n    }\r\n    private clickReg = () => {\r\n        //nav.replace(<RegisterView />);\r\n        let register = new RegisterController(undefined);\r\n        register.start();\r\n    }\r\n    private clickForget = () => {\r\n        let forget = new ForgetController(undefined);\r\n        forget.start();\r\n    }\r\n    render() {\r\n        let footer = <div className='text-center'>\r\n            <button className=\"btn btn-link\" color=\"link\" style={{margin:'0px auto'}}\r\n                onClick={this.clickReg}>\r\n                注册账号\r\n            </button>\r\n        </div>;\r\n        let header:string|boolean|JSX.Element = false;\r\n        if (this.props.withBack === true) {\r\n            header = '登录';\r\n        }\r\n        return <Page header={header} footer={footer}>\r\n            <div className=\"d-flex h-100 flex-column justify-content-center align-items-center\">\r\n                <div className=\"flex-fill\" />\r\n                <div className=\"w-20c\">\r\n                    {tonvaTop()}\r\n                    <div className=\"h-2c\" />\r\n                    <Form schema={schema} uiSchema={this.uiSchema} \r\n                        onButtonClick={this.onSubmit} \r\n                        onEnter={this.onEnter}\r\n                        requiredFlag={false} />\r\n                    <button className=\"btn btn-link btn-block\"\r\n                        onClick={() => this.clickForget()}>\r\n                        忘记密码\r\n                    </button>\r\n                </div>\r\n                <div className=\"flex-fill\" />\r\n                <div className=\"flex-fill\" />\r\n            </div>\r\n        </Page>;\r\n    }\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}